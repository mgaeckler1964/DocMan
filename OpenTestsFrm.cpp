//---------------------------------------------------------------------------

#include <vcl.h>
#include <gak/vcl_tools.h>

#pragma hdrstop

#include "OpenTestsFrm.h"
#include "ItemManager.h"
#include "DocManDM.h"
#include "DocManMain.h"

//---------------------------------------------------------------------------
using namespace gak;
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TOpenTestsForm *OpenTestsForm;
//---------------------------------------------------------------------------
__fastcall TOpenTestsForm::TOpenTestsForm(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TOpenTestsForm::ReloadQuery(TObject *)
{
	if( !vcl::isSystemAdmin() )
	{
		CheckBoxAllTests->Checked = false;
		CheckBoxAllTests->Enabled = false;
		CheckBoxAllTests->Visible = false;
	}
	QueryOpenTests->Close();
	QueryOpenTests->SQL->Clear();
	QueryOpenTests->SQL->Add(
		"select it.ID, it.ParentID, it.Name, it.Assigned_To, it.ordering, ut.Username "
		"from item_tree it, user_tab ut "
		"where it.Assigned_To = ut.id "
		"and (it.test_status = 0 or it.test_status is null) "
		"and it.item_type = :TypeTestExecStep"
	);

	if( !CheckBoxAllTests->Checked )
		QueryOpenTests->SQL->Add( "and it.Assigned_To = :actUser" );

	QueryOpenTests->SQL->Add( "order by it.ParentID, it.ordering, it.name" );

	QueryOpenTests->Params->Items[0]->AsInteger = TYPE_TEST_EXEC_STEP;

	if( !CheckBoxAllTests->Checked )
	{
		QueryOpenTests->Params->Items[1]->AsInteger = vcl::getActUserID();
	}

	QueryOpenTests->Open();
}
//---------------------------------------------------------------------------
void __fastcall TOpenTestsForm::FormHide(TObject *)
{
	QueryOpenTests->Close();
}
//---------------------------------------------------------------------------
void __fastcall TOpenTestsForm::QueryOpenTestsCalcFields(TDataSet *)
{
	int		parentID = QueryOpenTestsParentID->AsInteger;
	STRING	path = DocManDataModule->getPathForID( parentID );

	QueryOpenTestsPATH->AsString = (const char *)path;
}
//---------------------------------------------------------------------------

void __fastcall TOpenTestsForm::DBGridDblClick(TObject *)
{
	PTR_ITEM	theItem = getItem( QueryOpenTestsParentID->AsInteger );
	if( theItem )
	{
		DocManMainForm->openItem( theItem, QueryOpenTestsID->AsInteger );
		DocManMainForm->BringToFront();
		DocManMainForm->SetFocus();
	}
}
//---------------------------------------------------------------------------

void __fastcall TOpenTestsForm::FormCreate(TObject *)
{
	::SetWindowLong( Handle, GWL_HWNDPARENT, NULL );
}
//---------------------------------------------------------------------------

